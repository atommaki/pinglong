#!/usr/bin/python3

import sys
import subprocess
import time
import socket
import argparse
import operator
from multiprocessing import Process, Queue

def one_packet_ping(sleep, IP, IP_family, pingresults):
    if IP_family == socket.AF_INET6:
        pingcmd='ping6' # IPv6
    else:
        pingcmd='ping'  # IPv4
    try:
        import time
        time.sleep(sleep)
        Ping=subprocess.Popen([ pingcmd, "-c", "1", "-n", IP ],
                              stdout = subprocess.PIPE,
                              stderr = subprocess.PIPE)
        pingstdout, pingstderr = Ping.communicate()
        Ping.wait()
        time=0
        if Ping.returncode==0:
            ping_stdout_lastline = str(pingstdout).split('\\n')[-2]
            start=ping_stdout_lastline.find('=')+1
            end=start+ping_stdout_lastline[start:].find('/')
            time=float(ping_stdout_lastline[start:end])
        pingresults.put([Ping.returncode,time])
    except KeyboardInterrupt:
        return

def print_header(pingprobes):
    print('Time         x=lost   .=OK  '+' '.ljust(pingprobes-20)+'      loss(%)        min [ms]        avg [ms]        max [ms]')

def one_minute_pings(pingprobes, IP, IP_family, min_time, max_time, all_time, all_downtime):
    def print_stat(pingprobes, printed, pingok, packet_loss):
        if printed > 0:
            space_needed=pingprobes-printed
            print('  '.ljust(space_needed), end='')
            packet_loss=round((100*packet_loss)/printed, 1)
            print(str(packet_loss).rjust(3)+'%', end='')
            if packet_loss != 100:
                print(' '.ljust(6)+str(l_min_time)[:6].ljust(6)+' '.ljust(6)+str(l_all_time/pingok)[:6].ljust(6)+' '.ljust(6)+str(l_max_time)[:6].ljust(6))
            else:
                print('')

    try:
        printed=0
        pingok=0
        packet_loss=0
        l_min_time=1000000.0
        l_max_time=0.0
        l_all_time=0
        pingresults=Queue()

        current=time.strftime('%H%M')
        print(time.strftime('%H:%M')+': ', end='')
        sec=int(time.strftime('%S'))
        for i in range(0,pingprobes):
            x=Process(target=one_packet_ping, args=(i*(60-sec)/(pingprobes+1), IP, IP_family, pingresults,))
            x.start()
        while printed < pingprobes:
            while pingresults.qsize()>0:
                pingresult=pingresults.get()
                if pingresult[0]==0:
                    pingok=pingok+1
                    pingtime=pingresult[1]
                    sys.stdout.write('.')
                    if pingtime < l_min_time: l_min_time=pingtime
                    if pingtime > l_max_time: l_max_time=pingtime
                    l_all_time=l_all_time+pingtime
                else:
                    packet_loss=packet_loss+1
                    all_downtime=all_downtime+((60-sec)/pingprobes)
                    sys.stdout.write('x')
                printed=printed+1
                sys.stdout.flush()
            time.sleep(0.1)
        exit_ok = True
    except KeyboardInterrupt:
        exit_ok = False
    print_stat(pingprobes, printed, pingok, packet_loss)
    return (printed, packet_loss, min(min_time, l_min_time), max(max_time, l_max_time), all_time+l_all_time, all_downtime, exit_ok)

def main():
    ### Arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('host', action='store')
    ipv4_or_ipv6 = parser.add_mutually_exclusive_group()
    ipv4_or_ipv6.add_argument('-4', help='force IPv4', action='store_true')
    ipv4_or_ipv6.add_argument('-6', help='force IPv6', action='store_true')
    args = parser.parse_args()

    address_family = None
    if vars(args)['4']:
        address_family = socket.AF_INET
    if vars(args)['6']:
        address_family = socket.AF_INET6
    ### /Arguments

    try:
        try:
            if address_family:
                addrinfo=socket.getaddrinfo(args.host, 0, family = address_family)[0]
            else:
                addrinfo=socket.getaddrinfo(args.host, 0)[0]
        except socket.gaierror as e:
            print(e[1])
            sys.exit(1)

        IP_family=addrinfo[0]
        IP=addrinfo[4][0]

        if args.host == IP:
            print('PING '+args.host)
        else:
            print('PING '+args.host+' ('+IP+')')

        pingprobes=30
        lastheaderprinthour='X'
        pingn = 0
        packet_loss = 0
        min_time = 1000000.0
        max_time = 0.0
        all_time = 0
        all_downtime = 0
        while True:
            current=time.strftime('%H%M')
            if current[:2] != lastheaderprinthour:
                print_header(pingprobes)
                lastheaderprinthour=current[:2]
            previous=current
            pingn, packet_loss, min_time, max_time, all_time, all_downtime, exit_ok = tuple(map(operator.add, (pingn, packet_loss, 0, 0, 0, 0, False), one_minute_pings(pingprobes, IP, IP_family, min_time, max_time, all_time, all_downtime)))
            if not exit_ok:
                raise KeyboardInterrupt
            while current == previous:
                current=time.strftime('%H%M')
                time.sleep(1)
    except KeyboardInterrupt:
        print('')
        if pingn > 0:
            print('Total: {} packets transmitted, {} received, {}% packet loss'.format(pingn, int(pingn-packet_loss), round(100*packet_loss/pingn)))
            if pingn-packet_loss > 0:
                print('       RTT: min/avg/max = {}/{}/{} ms'.format(min_time,str(all_time/(pingn-packet_loss))[:6],max_time,max_time))
            if all_downtime > 0:
                print('       Downtime: sum =~ {} sec'.format(round(all_downtime,1)))
        sys.exit(0)


main()

